generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                        Int                       @unique @default(autoincrement())
  firstName                 String
  lastName                  String
  phoneNumber               String
  email                     String                    @unique
  password                  String
  isVerified                Boolean                   @default(false)
  status                    user_status               @default(ENABLED)
  createdAt                 DateTime                  @default(now())
  modifiedAt                DateTime                  @default(now()) @updatedAt
  contact_logs              contact_log[]
  user_role                 user_role[]
  user_sessions             user_session[]
  user_verification_tokens  user_verification_token[]
  created_bookings          booking[]                 @relation("BookingCreatedBy")
  modified_bookings         booking[]                 @relation("BookingModifiedBy")
  created_booking_items     booking_item[]            @relation("BookingItemCreatedBy")
  modified_booking_items    booking_item[]            @relation("BookingItemModifiedBy")
  created_deliveries        delivery[]                @relation("DeliveryCreatedBy")
  modified_deliveries       delivery[]                @relation("DeliveryModifiedBy")
  created_services          service[]                 @relation("ServiceCreatedBy")
  modified_services         service[]                 @relation("ServiceModifiedBy")
  created_booking_payments  booking_payment[]         @relation("BookingPaymentCreatedBy")
  modified_booking_payments booking_payment[]         @relation("BookingPaymentModifiedBy")
  created_refunds           refund[]                  @relation("RefundCreatedBy")
  modified_refunds          refund[]                  @relation("RefundModifiedBy")
  created_warranties        warranty[]                @relation("WarrantyCreatedBy")
  modified_warranties       warranty[]                @relation("WarrantyModifiedBy")
  created_warranty_claims   warranty_claim[]          @relation("WarrantyClaimCreatedBy")
  modified_warranty_claims  warranty_claim[]          @relation("WarrantyClaimModifiedBy")
}

model user_session {
  id           Int      @id @default(autoincrement())
  userId       Int
  refreshToken String   @unique
  createdAt    DateTime @default(now())
  user         user     @relation(fields: [userId], references: [id])
}

model user_verification_token {
  id        Int        @id @default(autoincrement())
  userId    Int
  token     String     @unique
  type      token_type
  expiresAt DateTime

  user user @relation(fields: [userId], references: [id])

  @@unique([userId, type])
}

enum token_type {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model system_configuration {
  id       Int     @unique @default(autoincrement())
  key      String  @unique
  value    String
  isActive Boolean @default(true)
}

model booking {
  id                    Int               @unique @default(autoincrement())
  clientName            String
  phoneNumber           String
  whatsappNumber        String
  status                booking_status    @default(DRAFT)
  code                  String?           @unique
  payableAmount         Int?
  paidAmount            Int?
  createdAt             DateTime          @default(now())
  modifiedAt            DateTime          @default(now()) @updatedAt
  isActive              Boolean           @default(true)
  isWarrantyClaim       Boolean           @default(false)
  appointmentDate       DateTime?
  createdBy             Int
  modifiedBy            Int
  clientType            client_type       @default(INDIVIDUAL)
  booking_items         booking_item[]
  delivery              delivery[]
  contact_log           contact_log[]
  booking_payments      booking_payment[]
  warrantyClaims        warranty_claim[]  @relation("WarrantyClaimBooking")
  originalBookingClaims warranty_claim[]  @relation("OriginalBookingClaims")
  createdByUser         user              @relation("BookingCreatedBy", fields: [createdBy], references: [id])
  modifiedByUser        user              @relation("BookingModifiedBy", fields: [modifiedBy], references: [id])
}

model booking_item {
  id             Int                 @unique @default(autoincrement())
  code           String?             @unique
  name           String
  serialNumber   String?
  type           booking_item_type
  reportedIssue  String?
  payableAmount  Int
  paidAmount     Int?
  comments       String?
  status         booking_item_status @default(DRAFT)
  createdAt      DateTime            @default(now())
  modifiedAt     DateTime            @default(now()) @updatedAt
  isActive       Boolean             @default(true)
  isRepaired     Boolean             @default(false)
  createdBy      Int
  modifiedBy     Int
  bookingId      Int
  paymentId      Int?
  vendor         String?
  service        service[]
  contact_log    contact_log[]
  warranty       warranty?
  payment        booking_payment?    @relation(fields: [paymentId], references: [id])
  booking        booking             @relation(fields: [bookingId], references: [id])
  createdByUser  user                @relation("BookingItemCreatedBy", fields: [createdBy], references: [id])
  modifiedByUser user                @relation("BookingItemModifiedBy", fields: [modifiedBy], references: [id])
}

model delivery {
  id                   Int             @unique @default(autoincrement())
  booking              booking         @relation(fields: [bookingId], references: [id])
  bookingId            Int
  status               delivery_status
  address              String
  postalCode           Int
  courier              String
  type                 courier_type
  phoneNumber          String
  createdAt            DateTime        @default(now())
  modifiedAt           DateTime        @default(now()) @updatedAt
  landmark             String?
  secondaryPhoneNumber String?
  deliveryDate         DateTime
  isActive             Boolean         @default(true)
  createdBy            Int
  modifiedBy           Int
  createdByUser        user            @relation("DeliveryCreatedBy", fields: [createdBy], references: [id])
  modifiedByUser       user            @relation("DeliveryModifiedBy", fields: [modifiedBy], references: [id])
}

model service {
  id             Int            @unique @default(autoincrement())
  booking_item   booking_item   @relation(fields: [bookingItemId], references: [id])
  bookingItemId  Int
  status         service_status
  remarks        String
  createdAt      DateTime       @default(now())
  modifiedAt     DateTime       @default(now()) @updatedAt
  isActive       Boolean        @default(true)
  createdBy      Int
  modifiedBy     Int
  createdByUser  user           @relation("ServiceCreatedBy", fields: [createdBy], references: [id])
  modifiedByUser user           @relation("ServiceModifiedBy", fields: [modifiedBy], references: [id])
}

model contact_log {
  id            Int            @unique @default(autoincrement())
  booking_item  booking_item   @relation(fields: [bookingItemId], references: [id])
  bookingItemId Int
  user          user           @relation(fields: [userId], references: [id])
  userId        Int
  booking       booking        @relation(fields: [bookingId], references: [id])
  bookingId     Int
  contactedAt   DateTime
  status        contact_method
  notes         String
  createdAt     DateTime       @default(now())
  modifiedAt    DateTime       @default(now()) @updatedAt
  isActive      Boolean        @default(true)
}

model booking_payment {
  id             Int            @unique @default(autoincrement())
  booking        booking        @relation(fields: [bookingId], references: [id])
  bookingId      Int
  status         payment_status
  payableAmount  Int?
  paidAmount     Int?
  createdAt      DateTime       @default(now())
  modifiedAt     DateTime       @default(now()) @updatedAt
  isActive       Boolean        @default(true)
  paymentMethod  payment_method
  recipientName  String?
  transactionId  String?
  createdBy      Int
  modifiedBy     Int
  refund         refund[]
  bookingItem    booking_item[]
  createdByUser  user           @relation("BookingPaymentCreatedBy", fields: [createdBy], references: [id])
  modifiedByUser user           @relation("BookingPaymentModifiedBy", fields: [modifiedBy], references: [id])
}

model refund {
  id              Int             @unique @default(autoincrement())
  booking_payment booking_payment @relation(fields: [paymentId], references: [id])
  paymentId       Int
  refundDate      DateTime
  remarks         String?
  createdAt       DateTime        @default(now())
  modifiedAt      DateTime        @default(now()) @updatedAt
  amount          Int
  isActive        Boolean         @default(true)
  createdBy       Int
  modifiedBy      Int
  createdByUser   user            @relation("RefundCreatedBy", fields: [createdBy], references: [id])
  modifiedByUser  user            @relation("RefundModifiedBy", fields: [modifiedBy], references: [id])
}

model system_role {
  id        Int         @unique @default(autoincrement())
  name      String
  isActive  Boolean     @default(true)
  user_role user_role[]
}

model user_role {
  id         Int         @unique @default(autoincrement())
  user       user        @relation(fields: [userId], references: [id])
  userId     Int
  systemRole system_role @relation(fields: [roleId], references: [id])
  roleId     Int
  isActive   Boolean     @default(true)
}

enum user_status {
  ENABLED
  DISABLED
}

enum payment_method {
  CASH
  WALLET
  BANK_TRANSFER
}

enum payment_status {
  PENDING
  PAID
}

enum contact_method {
  SMS
  CALL
  EMAIL
}

enum service_status {
  PENDING
  IN_REPAIR
  IN_QA
  QA_PASSED
  QA_FAILED
}

enum delivery_status {
  PENDING
  IN_TRANSIT_INBOUND
  IN_TRANSIT_OUTBOUND
  IN_WAREHOUSE
  DELIVERED
  PENDING_INBOUND
  PENDING_OUTBOUND
}

enum booking_status {
  DRAFT
  PENDING
  IN_REVIEW
  CONFIRMED
  PENDING_DELIVERY
  IN_QUEUE
  IN_PROGRESS
  RESOLVED
  PENDING_PAYMENT
  REJECTED
  COMPLETED
  CANCELLED
}

enum booking_item_status {
  DRAFT
  IN_REVIEW
  IN_QUEUE
  IN_PROGRESS
  COMPLETED
  IN_RESOLUTION
}

enum booking_item_resolution_status {
  RESOLVE
  REJECT
}

enum booking_item_type {
  GPU
  MOBO
  LAPTOP
}

enum courier_type {
  INBOUND
  OUTBOUND
}

enum client_type {
  CORPORATE
  INDIVIDUAL
}

model warranty {
  id                 Int                   @unique @default(autoincrement())
  bookingItemId      Int                   @unique
  bookingItem        booking_item          @relation(fields: [bookingItemId], references: [id])
  warrantyStartDate  DateTime
  warrantyEndDate    DateTime
  warrantyDays       Int                   @default(15)
  isActive           Boolean               @default(true)
  createdAt          DateTime              @default(now())
  modifiedAt         DateTime              @default(now()) @updatedAt
  createdBy          Int
  modifiedBy         Int
  createdByUser      user                  @relation("WarrantyCreatedBy", fields: [createdBy], references: [id])
  modifiedByUser     user                  @relation("WarrantyModifiedBy", fields: [modifiedBy], references: [id])
  warrantyClaimItems warranty_claim_item[]
}

model warranty_claim {
  id                 Int                   @unique @default(autoincrement())
  originalBookingId  Int
  originalBooking    booking               @relation("OriginalBookingClaims", fields: [originalBookingId], references: [id])
  claimBookingId     Int
  claimBooking       booking               @relation("WarrantyClaimBooking", fields: [claimBookingId], references: [id])
  claimNumber        String                @unique
  claimDate          DateTime              @default(now())
  remarks            String?
  isActive           Boolean               @default(true)
  createdAt          DateTime              @default(now())
  modifiedAt         DateTime              @default(now()) @updatedAt
  createdBy          Int
  modifiedBy         Int
  createdByUser      user                  @relation("WarrantyClaimCreatedBy", fields: [createdBy], references: [id])
  modifiedByUser     user                  @relation("WarrantyClaimModifiedBy", fields: [modifiedBy], references: [id])
  warrantyClaimItems warranty_claim_item[]
}

model warranty_claim_item {
  id              Int            @unique @default(autoincrement())
  warrantyClaimId Int
  warrantyClaim   warranty_claim @relation(fields: [warrantyClaimId], references: [id])
  warrantyId      Int
  warranty        warranty       @relation(fields: [warrantyId], references: [id])
  reportedIssue   String
  remarks         String?
  createdAt       DateTime       @default(now())
  modifiedAt      DateTime       @default(now()) @updatedAt
}
