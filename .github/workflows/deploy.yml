name: Deploy to VPS

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: gpu-saviors-be
  CONTAINER_NAME_1: gpu-saviors-api
  CONTAINER_NAME_2: gpu-saviors-api-replica

jobs:
  test_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: NODE_ENV=production npm run build

  build-and-deploy:
    needs: test_build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file
        run: |
          cat << EOF > .env
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          NODE_ENV=production
          JWT_ACCESS_KEY_SECRET=${{ secrets.JWT_ACCESS_KEY_SECRET }}
          JWT_REFRESH_KEY_SECRET=${{ secrets.JWT_REFRESH_KEY_SECRET }}
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          RATE_LIMIT_WINDOW_MS=${{ secrets.RATE_LIMIT_WINDOW_MS }}
          RATE_LIMIT_MAX_REQUESTS=${{ secrets.RATE_LIMIT_MAX_REQUESTS }}
          AUTH_RATE_LIMIT_WINDOW_MS=${{secrets.AUTH_RATE_LIMIT_WINDOW_MS}}
          AUTH_RATE_LIMIT_MAX_REQUESTS=${{secrets.AUTH_RATE_LIMIT_MAX_REQUESTS}}
          EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          VPS_IP=${{ secrets.VPS_IP }}
          PORT=${{ secrets.PORT }}
          EOF

      - name: Build Docker image
        run: |
          docker build \
            --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
            -t ${{ env.IMAGE_NAME }}:latest \
            -t ${{ env.IMAGE_NAME }}:${{ github.sha }} \
            .

      - name: Save Docker image
        run: docker save ${{ env.IMAGE_NAME }}:latest | gzip > image.tar.gz

      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }} 
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: "image.tar.gz,compose.yaml,.env"
          target: "/opt/gpu_saviors-be"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            set -e
            cd /opt/gpu_saviors-be

            docker load < image.tar.gz

            docker compose down || true

            # Keep last 3 images only
            docker images ${{ env.IMAGE_NAME }} --format "{{.ID}}" | tail -n +4 | xargs -r docker rmi || true

            # Run migration first
            echo "Starting migration..."
            docker compose run --rm migration
            
            if [ $? -ne 0 ]; then
              echo "Migration failed!"
              exit 1
            fi
            
            echo "Migration completed successfully!"
            
            # Start app services
            docker compose up -d app app-replica caddy
            
            echo "Services started successfully!"

            echo "Deployment successful!"

            # Cleanup
            rm -f image.tar.gz

  health-check:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Health Check
        run: |
          sleep 25
          curl -f https://api.gpusaviors.com/health || exit 1
          echo "Health Check Passed!"
